<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Insanely Marketable Business Ideas &#8211; jare.cloud</title>
	<atom:link href="/category/insanely-marketable-business-ideas/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Jare&#039;s Cloud</description>
	<lastBuildDate>Sun, 19 Jan 2020 03:53:18 +0000</lastBuildDate>
	<language>en-CA</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.3.2</generator>
	<item>
		<title>The Nash Equilibrium, Fomo3d, and Dangerous Game Theory</title>
		<link>/2020/01/17/the-nash-equilibrium-fomo3d-and-dangerous-game-theory/</link>
				<pubDate>Sat, 18 Jan 2020 01:02:16 +0000</pubDate>
		<dc:creator><![CDATA[jare]]></dc:creator>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Insanely Marketable Business Ideas]]></category>

		<guid isPermaLink="false">/?p=241</guid>
				<description><![CDATA[Check out this article in it&#8217;s original form, on jare.cloud! Join our growing Telegram community for blog updates, bot chat,]]></description>
								<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img src="/wp-content/uploads/2020/01/image-31-1024x653.png" alt="" class="wp-image-248" srcset="/wp-content/uploads/2020/01/image-31-1024x653.png 1024w, /wp-content/uploads/2020/01/image-31-300x191.png 300w, /wp-content/uploads/2020/01/image-31-768x490.png 768w, /wp-content/uploads/2020/01/image-31-360x230.png 360w, /wp-content/uploads/2020/01/image-31.png 1332w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p><a href="http://jare.cloud/2020/01/17/the-nash-equilibrium-fomo3d-and-dangerous-game-theory/?preview_id=241&amp;preview_nonce=f71da94af0&amp;preview=true&amp;_thumbnail_id=249">Check out this article in it&#8217;s original form, on jare.cloud</a>!</p>



<p> Join our growing Telegram community for blog updates, bot chat, general fun and crypto madness? <a href="https://t.me/ManyVolumeSignalMonster">https://t.me/ManyVolumeSignalMonster</a> </p>



<p>Fomo3D was a dangerous game theory that was then applied, obfuscated, and raked in a sh#tton of cold, hard cash.</p>



<p>Users would sign up for <a href="https://exitscam.me/">https://exitscam.me/</a> and play the game. Their greed would ensure they always spent more than they lost in an auction that Harvard Business School teaches their pupils &#8211; it&#8217;s called a &#8216;War of Attrition.&#8217;</p>



<p>When offered the chance to bid on a $20 bill with $1, people will bid on it. The problem is this: the 2nd highest bid also has to pay whenever the winner is chosen. So, when the bid is $19 and the prize is $20, someone will surely bid to make a dollar. Now, when you&#8217;re the $18 bid you might lose your $18 if you don&#8217;t bid again &#8211; paying $20 for $20. If you win, you&#8217;re down $0. If you don&#8217;t bid, and lose now, you&#8217;re down $18. </p>



<p>What&#8217;s the person with the $19 bid do?</p>



<p>There&#8217;s been documented cases where the bidding reached a walloping $4000 &#8211; in a display of sheer ego. The loser was caught up in the ecstasy of playing the game.</p>



<p>That&#8217;s exactly what Fomo3D did, except the winnings were divvied up in a very smart way that wasn&#8217;t previously available to the general public: using an underlying dividend-paying or burning token (forget which) they cleverly increased the token value or delivered payments for token holders when people played the game.</p>



<p>This caused a huge social effort by token holders &#8211; and game players &#8211; to spread FOMO about the game around the internet. This would bring in new players and &#8211; occasionally &#8211; those who would even win or lose by ego, or win or lose because of the sheer thrill of the game.</p>



<p>Learning all of this tonight for the first time, I did a brief Google on &#8216;dangerous game theory&#8217; and was actually learning about game theory for the first time in my life. Now, this shit is fun. And profitable.</p>



<p>I read about War of Attrition. What a beautiful concept. </p>



<p>The wikipedia article linked to a few other sources: Chicken, another dangerous game theory, has a fancy theory name &#8211; but it&#8217;s still chicken. When one veers off they lose, when both collide they both lose. We&#8217;ll examine opportunities here at a later date, but I also came across another interesting concept.</p>



<p>The prisoner&#8217;s dilemma is that two guys are caught for selling drugs, and both are facing 2 years for sure. The feds think they&#8217;re both involved in a much more serious crime, and tell Prisoner A that he&#8217;ll get 3 years if they both confess &#8211; but if he confesses, and Prisoner B doesn&#8217;t, he&#8217;ll get 1 year and Prisoner B will get 10. Now, if he denies and Prisoner B confesses, then he will get 10 years and Prisoner B will get 1 year.</p>



<figure class="wp-block-image size-large"><img src="/wp-content/uploads/2020/01/image-25.png" alt="" class="wp-image-242" srcset="/wp-content/uploads/2020/01/image-25.png 645w, /wp-content/uploads/2020/01/image-25-300x84.png 300w" sizes="(max-width: 645px) 100vw, 645px" /></figure>



<p>What the feds don&#8217;t mention is the final outcome: if they both deny, they&#8217;re both faced with 2 years. This is what&#8217;s referred to as the &#8216;globally optimal solution&#8217; &#8211; meaning that if I was able to talk to the other prisoner we might both deny.</p>



<p>What&#8217;s in my best interest, as Prisoner 1?</p>



<p>Well, it looks as though no matter what I do &#8211; without knowing the other party&#8217;s intentions &#8211; confessing is my best option. I either face 1 year &#8211; which is great &#8211; or three years. However, I&#8217;m completely avoiding the possibility that I might get 10 years &#8211; which is the worst-case scenario. Both of us confessing isn&#8217;t the best optimal answer on the board, but it&#8217;s what&#8217;s best without knowing the other party&#8217;s intentions &#8211; we call this the Nash Equilibrium, after famous mathematician John Nash. This is applied extensively to playing poker &#8211; where it applies just as much. </p>



<p>Nash was also one of the most famous schizophrenics, and the subject of the movie A Beautiful Mind. Want to read more about how people with schizophrenia think? <a href="https://jare.cloud/2020/01/14/how-do-people-with-mental-health-illnesses-like-schizophrenia-or-other-psychoses-think/">Check out this article I wrote on psychotic thoughts</a> (from first-hand experience!)</p>



<p>Now, if we flip these numbers to their inverse and do some jiggery pokery, we can come up with a profitable business idea for anyone to rake in huge amounts of capital from tokensales and giving people the opportunity to have fun &#8211; and potentially win big.</p>



<figure class="wp-block-image size-large"><img src="/wp-content/uploads/2020/01/image-27.png" alt="" class="wp-image-244" srcset="/wp-content/uploads/2020/01/image-27.png 658w, /wp-content/uploads/2020/01/image-27-300x83.png 300w" sizes="(max-width: 658px) 100vw, 658px" /></figure>



<p>Say my risk is that I might lose all of my 2 Ether deposit on betting in this game. The funds are locked in smart contract. If I go with Option 2, there&#8217;s a chance that I could lose my whole balance or there&#8217;s a chance I might get 1.7 of my ether back. OK, good enough.</p>



<p>If I choose Option 1, there&#8217;s a chance I get 1.3 of my Ether back or &#8211; here&#8217;s the kicker &#8211; I might get 2.3 of my ether back (and &#8216;win&#8217;) should Player 2 choose option 2.</p>



<p>Logic would say that a rational person wants their chance at winning, and will always go with Option 1. Whereas, if both players do, then they both lose. Right?</p>



<p>So far this isn&#8217;t very promising as a dangerous game.</p>



<p>However, enter an oraclized call to a random number generator choosing 50/50 either option 1 or option 2, as player 2. Sure, this player would need to put funds up first in order to play &#8211; which might come from project funds or from tokenholders putting up the funds against people that lock up Eth in a contract &#8211; but check this out, here&#8217;s what would happen in Game 1:</p>



<figure class="wp-block-image size-large"><img src="/wp-content/uploads/2020/01/image-28-1024x154.png" alt="" class="wp-image-245" srcset="/wp-content/uploads/2020/01/image-28-1024x154.png 1024w, /wp-content/uploads/2020/01/image-28-300x45.png 300w, /wp-content/uploads/2020/01/image-28-768x115.png 768w, /wp-content/uploads/2020/01/image-28-1536x231.png 1536w, /wp-content/uploads/2020/01/image-28.png 1750w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Player 1 will always (rationally) choose option 1. The RNG chooses 50/50 options 1 or 2. In green/yellow are the possible outcomes for player 1: they either get 1.3 Ether if they lose, or 2.3 ether if they win. Now, no rational GAMBLER would play these odds &#8211; but, keep listening! There&#8217;s a 50% chance that the pot wins 0.7 Ether, and a 50% chance it loses 0.3 Ether. Fair enough, so averaging out our winnings that&#8217;s 0.2 Ether.</p>



<p>I&#8217;m going to take this Ether and add half to the game pot. The other half I&#8217;m going to use to give value to my game token &#8211; by buy n burn or dividends.</p>



<p>Let&#8217;s look what happens in Game 2:</p>



<figure class="wp-block-image size-large"><img src="/wp-content/uploads/2020/01/image-29-1024x123.png" alt="" class="wp-image-246" srcset="/wp-content/uploads/2020/01/image-29-1024x123.png 1024w, /wp-content/uploads/2020/01/image-29-300x36.png 300w, /wp-content/uploads/2020/01/image-29-768x92.png 768w, /wp-content/uploads/2020/01/image-29-1536x184.png 1536w, /wp-content/uploads/2020/01/image-29.png 1743w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Now we&#8217;re talking, we&#8217;ve sweetened the pot that the Player has a 50/50 chance of winning &#8211; with half the house&#8217;s winnings from each game before that reinvested back into the pot. There&#8217;s a chance they win &#8211; and pot doesn&#8217;t increase, no new token burn or dividends happen. There&#8217;s half a chance they lose again &#8211; and it&#8217;s added to the pot and increases the value of the token.</p>



<p>Etc etc tending towards infinity, the potential winnings for playing the game increase ever so much while they&#8217;re still losing 1/2 the time playing against the evil supercomputer. </p>



<p>3rd game? More money to be won! Eventually, the gambler&#8217;s odds increase enough to be a worthwhile bet no matter what &#8211; and the token&#8217;s value continues to increase with each average result of the game. This creates a frenzy of people spreading news about the game, drawing more and more people and money into the game.</p>



<figure class="wp-block-image size-large"><img src="/wp-content/uploads/2020/01/image-30-1024x124.png" alt="" class="wp-image-247" srcset="/wp-content/uploads/2020/01/image-30-1024x124.png 1024w, /wp-content/uploads/2020/01/image-30-300x36.png 300w, /wp-content/uploads/2020/01/image-30-768x93.png 768w, /wp-content/uploads/2020/01/image-30-1536x186.png 1536w, /wp-content/uploads/2020/01/image-30.png 1730w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>What does this mean for me, penning this article? Even though I don&#8217;t have a smart contract developer or a budget, at least now I own the Intellectual Property on this new evolution of a Dangerous Game Theory smart contract game. If you are a smart contract developer and would like to team up, let me know! If I&#8217;ve made any critical errors in my math &#8211; it wouldn&#8217;t be the first time! Let me know!</p>



<p>Now that we&#8217;ve talked about having the benefits of those with beautiful minds &#8211; <a href="https://jare.cloud/2020/01/15/why-schizophrenia-is-the-most-under-represented-of-all-the-death-sentences/">let&#8217;s talk about the challenges schizophrenics face</a>, in this article I wrote!</p>
]]></content:encoded>
										</item>
		<item>
		<title>Amazon Ebay Aliexpress Retail-Arbitrage-As-A-Service</title>
		<link>/2020/01/16/amazon-ebay-aliexpress-retail-arbitrage-as-a-service/</link>
				<pubDate>Fri, 17 Jan 2020 04:32:48 +0000</pubDate>
		<dc:creator><![CDATA[jare]]></dc:creator>
				<category><![CDATA[Bots]]></category>
		<category><![CDATA[Insanely Marketable Business Ideas]]></category>

		<guid isPermaLink="false">/?p=222</guid>
				<description><![CDATA[Join our growing Telegram community for blog updates, bot chat, general fun and crypto madness? https://t.me/ManyVolumeSignalMonster As I detailed in]]></description>
								<content:encoded><![CDATA[
<p> Join our growing Telegram community for blog updates, bot chat, general fun and crypto madness? <a href="https://t.me/ManyVolumeSignalMonster">https://t.me/ManyVolumeSignalMonster</a> </p>



<p>As I detailed in this recent article surrounding <a href="https://jare.cloud/2020/01/15/automated-crypto-trading-bot-to-buy-pump-and-dump-sentiment-signals-from-twitter/">Twitter automation to buy cryptocurrency during pumps</a> and in this way-old Hackernoon and Medium discussing how I once <a href="https://medium.com/@jarettdunn/i-1000th-idea-to-make-money-online-via-python-chained-sqlmaps-8acb25cc9ad8?source=your_stories_page---------------------------">toyed with the morality of ethical hacking for profit</a> &#8211; it&#8217;s obvious that I often have ideas for tech businesses that don&#8217;t really get off the ground. I lack the marketing chops to execute these things, so I&#8217;m going to continue letting you guys know how my Proof of Concepts go and maybe one day some of you can make a living with one of my ideas!</p>



<p>This is another entry in Insanely Marketable Business Ideas. Hooah!</p>



<figure class="wp-block-image"><img src="https://cdn.discordapp.com/attachments/606522166166421534/667572917105590282/unknown.png" alt=""/><figcaption>Source: My code just a minute ago</figcaption></figure>



<figure class="wp-block-image"><img src="https://cdn.discordapp.com/attachments/606522166166421534/667573207414341633/unknown.png" alt=""/><figcaption>Source: My code a minute after that</figcaption></figure>



<p>What you might notice about these two images is the insanely obvious: if someone were to buy one of these generic handhold consoles on Aliexpress and then sell it on Ebay they could pocket the difference in costs. This is called &#8216;retail arbitrage,&#8217; where retail is what we&#8217;re trading and arbitrage is the act of buying low and immediately selling high. It&#8217;s preferable to sell before you have to buy &#8211; which you can effectively do selling on these marketplaces.</p>



<p>You&#8217;ll notice that I&#8217;m lacking a corresponding Amazon screenshot &#8211; their Product Advertising API requires you to have 3 sales in a certain amount of time as an affiliate before you can have access to the API. D&#8217;oh! I&#8217;ve sent them a message saying I&#8217;m creating a shopping comparison engine &#8211; it might be unwise to say we&#8217;re propagating the arbitrage &#8216;problem.&#8217; Sometimes, people that buy an item on Ebay and receive a package wrapped up by Amazon Fulfillment will become irate they&#8217;ve been the victim of not knowing they can search more than one site, and they might kick up a customer service complaint&#8230;</p>



<p>Either way, there&#8217;s money to be made!</p>



<p>But, that&#8217;s not my idea. That idea&#8217;s been tried and done effectively by many, and you can google for more info. My idea is buried in those screenshots, above, and in my explanation of the Amazon part too &#8211; these are affiliate links. If someone were to visit Aliexpress or Ebay after clicking my link and place an order within a month or a few months, I get a little % kickback from that sale. </p>



<p>In the case of providing this as a service, the model would be that I create a beautiful and effective comparison tool to find the highest potential margins for search results or by the best possible margins in a given category and finding exact (or near-exact by text compare) title matches, then display them in easy-to-organize lists for arbitrageurs to peruse, click the links, buy a bulk order of many items or maybe just an item or two, and as I build my network &#8211; and community &#8211; of arbitrageurs, my income from the % of a % of each initial sale will exponentially increase above and beyond the potential returns from the actual arbitraging. </p>



<p>Retail arbitrage is fraught with potential pitfalls: from max. orders or max. sales, all the way to the customer service burden &#8211; and potential returns, restocking fees or concerns &#8211; it is easy to lose some or all of your profits in a second with retail arbitraging if you&#8217;re not careful. When building a service that provides instant comparisons for the potential arbitrageur &#8211; and a supportive, helpful community of arbitraging friends &#8211; we can ensure the overall success and growth of the operation.</p>



<p>Sunk costs?</p>



<p>Upkeep of servers, initial dev and MARKETING.</p>



<p>Potential upside?</p>



<p>We&#8217;d run the site for free. Everyone can come in and discuss the opportunities of Retail Arbitrage, and use the tool to their heart&#8217;s content. In return, our marketing efforts will reflect the fact that other arbitraging tools require a monthly or yearly subscription &#8211; putting ours leagues ahead of the competition.</p>



<p>Ebay Partner Network pays 1-6% per sale depending on geo, if the sale happens within 24hrs of clicking the link. Aliexpress up to 9%, and Amazon pays up to a walloping 10%! When someone wants to arbitrage again, they&#8217;d certainly want to find a new-and-improved arbitrage deal &#8211; they&#8217;d return to our platform, find a new killer deal, place another order and boombingbang more affiliate income!</p>



<p>NOW, for the win, let&#8217;s review some code.</p>



<p>First, after running npm install for the required packages, we&#8217;ll require them in the code:</p>



<pre class="wp-block-code"><code>let eBay = require('ebay-node-api')
var request = require('request')</code></pre>



<p>Next we&#8217;ll instantiate our eBay object, like so:</p>



<pre class="wp-block-code"><code>let ebay = new eBay({
    clientID: '',
    env: 'PRODUCTION', // optional default = 'PRODUCTION'
    headers:{ // optional
        'X-EBAY-C-MARKETPLACE-ID': 'EBAY_US' // For Great Britain https://www.ebay.co.uk/
    }
})</code></pre>



<p>Now, I found out that I could use eBay&#8217;s affiliate tools to build an affiliate URL using my account and campaign. Afterwards, I hijack the &amp;mpre= field and replace the item URL with my URL for any given item, to build a new-and-improved eBay aff link for any given URL.</p>



<p>For fun and profit, we set our eBay affiliate URL &#8216;template&#8217; as well as our hard-coded search term:</p>



<pre class="wp-block-code"><code>var template = 'http://rover.ebay.com/rover/1/706-53473-19255-0/1?ff3=4&amp;pub=5575480811&amp;toolid=10001&amp;campid=5338476385&amp;customid=&amp;mpre='
var search = '500in1 nes'</code></pre>



<p>In our ebaydo function, we search eBay products using the eBay node package and loop over the resulting json. The url for the item is parsed then encoded, and we create our affiliate URL by joining our template from above with this new encoded item&#8217;s url. </p>



<p>Voila! Paydirt!</p>



<p>We log to console the network, affiliate URL, title, and price object for fun and profit. If there&#8217;s an error, let&#8217;s also log the error! Debugging is fun, right?</p>



<pre class="wp-block-code"><code>function ebaydo(keywords) {

    ebay.findItemsByKeywords({
        keywords: keywords
    }).then((data) => {
        for (var item in data[0].searchResult[0].item) {
            url = encodeURIComponent(data[0].searchResult[0].item[item].viewItemURL[0])
            url = template + url
            console.log('ebay:')
            console.log('affiliate url: ' + url)
            console.log(data[0].searchResult[0].item[item].title[0])
            console.log(data[0].searchResult[0].item[item].sellingStatus[0].currentPrice[0])
            console.log(' ')
        }
    }, (error) => {
        console.log(error);
    });
}</code></pre>



<p>The ali function is more complicated. First, we&#8217;ll get and parse the current time into url-encoded string. Phew, that took a lot of Googling to figure out&#8230;</p>



<p>Next, we&#8217;ll encode our keywords. That probably means some handy %20s (spaces). Then, we load a list of products based on those keywords from Alibaba&#8217;s API, parse the result into json, loop over the products and save some useful info to vars for later. We&#8217;ll take note of the price, product url, image url (why not? Should have done this for eBay too! People can compare the images when finding their like products&#8230;) and product title. Next, we send some of these vars off to a separate function.</p>



<pre class="wp-block-code"><code>function ali(keywords) {
    var time = new Date();
    var time2 = (time.getHours().toString() + "%20" + time.getMinutes().toString() + "%20" + time.getSeconds().toString());
    keywords = encodeURIComponent(keywords)

    var url = "http://gw.api.alibaba.com/openapi/param2/2/portals.open/api.listPromotionProduct/76080?sort=volumeDown&amp;fields=salePrice,productTitle,volume,imageUrl,productUrl&amp;keywords=" + keywords;
    console.log('keywords?: ' + url);
    var responses = new Array();
    try {
        var result2 = request.get(url, function(e, r, result2) {
            var json = JSON.parse(result2)
            if (json.result != null) {
                for (var i in json.result.products) {
                    console.log(json.result.products[i]);
                    var price = json.result.products[i].salePrice;
                    var id = json.result.products[i].productUrl;
                    var img = json.result.products[i].imageUrl;
                    var title = json.result.products[i].productTitle;

                    
                    dosearchurl(id, title, img, price)
                }
            } 
        })
    } catch (e) {
        console.log('exception: ' + e.toString());
    }
}
</code></pre>



<p>In dosearchurl, this genius technique allows me to have the variables persistent over the next request.get call, which returns a promise, meaning that if we did request.get inside a for loop then tried to access our old variables (like title in this case, for example) it would only find the variable value at the state in the new point in time when the promise has resolved (ie. the request completes) &#8211; meaning all our results would output the same data as the for loop has completed and it executes the console.log code with the for loops final value, instead of each incremented value.</p>



<p>So, by taking the for loop and feeding it the variables in a different scope, the variables remain persistent even though there&#8217;s a time delay for the promise &#8211; and we can output the variables in their proper sequence, instead of only the final one over and over again.</p>



<p>In here, we load the product id on another alibaba api endpoint &#8211; this one to create an affiliate url for our product we&#8217;ve found. Then, we output to console all the juicey details about our potential arbitrageur&#8217;s opportunity &#8211; and our potential affiliate income.</p>



<pre class="wp-block-code"><code>function dosearchurl(id, title, img, price) {
    var url2 = "http://gw.api.alibaba.com/openapi/param2/2/portals.open/api.getPromotionLinks/76080?fields=promotionUrl&amp;trackingId=4632&amp;urls=" + id;
    var responses = new Array();
    try {
        var result3 = request.get(url2, function(e, r, result3) {

            var json = JSON.parse(result3)
            console.log('aliexpress:')
            console.log('title: ' + title.replace(/&lt;[^>]*>?/gm, ''))
            console.log('affiliate url: ' + json.result.promotionUrls[0].promotionUrl);
            console.log('img: ' + img)
            console.log('price: ' + price)
            console.log(' ')

        });

    } catch (e) {
        console.log('exception: ' + e.toString());
    }
}</code></pre>



<p>It&#8217;s a win-win-win: goldmoney for the arbitrageur who earns surebet money, paydirt for me as I gain a tiny percent of those sales over and over again, and of course it&#8217;s a good thing &#8211; big bucks &#8211; for the retail marketplace. Hooah!</p>



<p>I hope you&#8217;re as excited about my POC as I was creating it then describing it here. Someone will surely bet some time and effort and marketing chops to execute this vision.. will it be me?</p>
]]></content:encoded>
										</item>
	</channel>
</rss>
